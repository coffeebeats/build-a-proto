// This is a top-level comment

enum MessageType {
    // This is an inner comment.

    TYPE_1 = 0; // This is an inline comment.
    TYPE_2 = 1;
    TYPE_3 = 2;
}

// Encodings
delta
zig_zag
quat_smallest_three
omit_zero_value
pad()

// Sizing
bits(n)
bits(var)
fixed(exp,mtsa)

message Snapshot {
    encoding zig_zag_vlq = [zigzag bits(var)];
    encoding delta_zig_zag_vlq = [delta, zigzag, bits(var)];

    message Position {
        f32 x, y, z;
    }

    // name is an example string
    string name;

    MessageType type;

    Position pos = [delta, dead_reckon(0.02), pad(bytes(1))];

    list<Position, 3> = delta;

    bool field_name_0;
    []MessageType message_types;

    []bit field_name_01;
    [2]bit field_name_01;

    []byte field_name_01;
    [2]byte field_name_01 = bits();

    byte field_name_1 = bits(8);
    u8 field_name_1 = bits(8);
    u16 field_name_2 = bits(16);
    u32 field_name_3 = bits(32);
    u64 field_name_4 = bits(64);
    u64 field_name_5 = bits(var);

    i8 field_name_6 = bits(8);
    i16 field_name_7 = zig_zag_vlq;
    i32 field_name_8 = zig_zag_vlq;
    i64 field_name_9 = delta_zig_zag_vlq;

    f32 field_name_10 = [delta, fixed(8, 4)];
    f64 field_name_11 = 64 bits;

    [2]f32 field_name_13;
    [4]f32 field_name_15 = [fixed(8,5)];

    [3]f32 position;
    [3]f32 linear_velocity;
    [3]f32 angular_velocity;

    [4]f64 field_name_16 = [quat.smallest_three];
}